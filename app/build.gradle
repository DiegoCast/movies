apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: '../dependencies.gradle'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.diego.movies"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    
    buildTypes {
        release {
            manifestPlaceholders = [appName: "MoviesApp"]
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        
        debug {
            manifestPlaceholders = [appName: "MoviesApp Debug"]
            applicationIdSuffix ".debug"
            // Avoid DexIndexOverflowException
            // minifyEnabled true
            // multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    
    dataBinding {
        enabled = true
    }
    
    flavorDimensions "main"
    
    productFlavors {
        mock {
            buildConfigField "String", "ENVIRONMENT", "\"development\""
            buildConfigField "String", "APIURL", "\"https://api.themoviedb.org/3/\""
            buildConfigField "String", "APIKEY", "\"76a95aa43c2db657d2389027acccb1f6\""
            
            dimension "main"
        }
        production {
            buildConfigField "String", "ENVIRONMENT", "\"production\""
            buildConfigField "String", "APIURL", "\"https://api.themoviedb.org/3/\""
            buildConfigField "String", "APIKEY", "\"76a95aa43c2db657d2389027acccb1f6\""
    
            dimension "main"
        }
    }
    
    sourceSets {
        production.java.srcDirs += 'src/common/java'
    }
    
    // Disable mockRelease
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release') {
            if (variant.getFlavors().get(0).name == 'mock') {
                variant.setIgnore(true)
            }
        }
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

dependencies {
    
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    
    def ui = rootProject.ext.uiDependencies
    def domain = rootProject.ext.domainDependencies
    def data = rootProject.ext.dataDependencies
    def test = rootProject.ext.testDependecies
    
    compileOnly domain.annotationProcessor
    
    implementation ui.supportLibrary
    implementation ui.recyclerView
    implementation ui.constraintLayout
    implementation ui.butterKnife
    kapt ui.butterKnifeApt
    implementation ui.archLifeCycle
    implementation ui.picasso
    
    implementation domain.retrofit
    implementation domain.retrofitGsonConverter
    implementation domain.retrofitRxJava2Adapter
    implementation domain.retrofitConverterScalars
    implementation domain.rxJava2
    implementation domain.rxAndroid
    implementation domain.dagger
    kapt domain.daggerApt
    implementation domain.loggingInterceptor
    implementation domain.okHttpUrlConnection
    
    implementation data.moshiConverter
    implementation data.moshi
    
    testImplementation test.junit
    testImplementation test.mockito
    testImplementation test.mockwebserver
    
    androidTestImplementation test.supportAnnotations
    androidTestImplementation test.testRunner
    androidTestImplementation test.espresso
}
